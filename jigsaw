#!/usr/bin/env php
<?php

use Illuminate\Container\Container;
use Illuminate\Contracts\Events\Dispatcher;
use Illuminate\View\Compilers\BladeCompiler;
use Illuminate\View\Engines\CompilerEngine;
use Illuminate\View\Engines\EngineResolver;
use Illuminate\View\Factory;
use Illuminate\View\FileViewFinder;
use Jigsaw\Jigsaw\Console\BuildCommand;
use Jigsaw\Jigsaw\Console\InitCommand;
use Jigsaw\Jigsaw\Console\MakeCollectionCommand;
use Jigsaw\Jigsaw\Filesystem;
use Jigsaw\Jigsaw\Handlers\BladeHandler;
use Jigsaw\Jigsaw\Handlers\CollectionIndexHandler;
use Jigsaw\Jigsaw\Handlers\CollectionItemHandler;
use Jigsaw\Jigsaw\Handlers\DefaultHandler;
use Jigsaw\Jigsaw\Handlers\MarkdownHandler;
use Jigsaw\Jigsaw\Jigsaw;
use Jigsaw\Jigsaw\TemporaryFilesystem;

if (file_exists(__DIR__.'/vendor/autoload.php')) {
    require __DIR__.'/vendor/autoload.php';
} else {
    require __DIR__.'/../../autoload.php';
}

// Config
$cachePath = getcwd() . '/_tmp';
$buildPath = getcwd() . '/build';
$sourcePath = getcwd() . '/source';

$container = new Container;

$container->bind(Filesystem::class, function($c) {
    return new Filesystem();
});

$jigsaw = new Jigsaw($container[Filesystem::class], $cachePath);

$container->bind(Factory::class, function ($c) use ($cachePath, $sourcePath) {
    $resolver = new EngineResolver;

    $resolver->register('blade', function () use ($cachePath) {
        $compiler = new BladeCompiler(new Filesystem, $cachePath);
        return new CompilerEngine($compiler, new Filesystem);
    });

    $finder = new FileViewFinder(new Filesystem, [$sourcePath]);
    return new Factory($resolver, $finder, Mockery::mock(Dispatcher::class)->shouldIgnoreMissing());
});

$container->bind(BladeHandler::class, function ($c) {
    return new BladeHandler($c[Factory::class]);
});

$container->bind(MarkdownHandler::class, function ($c) use ($cachePath) {
    $tempFilesystem = new TemporaryFilesystem($cachePath);
    return new MarkdownHandler($tempFilesystem, $c[Factory::class]);
});

$container->bind(CollectionItemHandler::class, function ($c) use ($cachePath, $jigsaw) {
    $tempFilesystem = new TemporaryFilesystem($cachePath);
    return new CollectionItemHandler($jigsaw, $tempFilesystem, $c[Factory::class]);
});

$container->bind(CollectionIndexHandler::class, function ($c) use ($jigsaw) {
    return new CollectionIndexHandler($c[Factory::class], $jigsaw);
});

$jigsaw->registerHandler($container[CollectionIndexHandler::class]);
$jigsaw->registerHandler($container[CollectionItemHandler::class]);
$jigsaw->registerHandler($container[MarkdownHandler::class]);
$jigsaw->registerHandler($container[BladeHandler::class]);
$jigsaw->registerHandler($container[DefaultHandler::class]);

$buildCommand = new BuildCommand($jigsaw, $sourcePath, $buildPath);
$makeCollectionCommand = new MakeCollectionCommand($container[Filesystem::class]);

$app = new Symfony\Component\Console\Application('Jigsaw', '0.4.0');
$app->add($buildCommand);
$app->add($container[InitCommand::class]);
$app->add($makeCollectionCommand);
$app->run();
